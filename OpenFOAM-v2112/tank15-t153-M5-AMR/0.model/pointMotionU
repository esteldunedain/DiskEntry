/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2112                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       pointVectorField;
    object      pointMotionU;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    #includeEtc "caseDicts/setConstraintTypes"

    sidesX
    {
        type            fixedNormalSlip;
        n               (1 0 0);
    }

    sidesY
    {
        type            fixedNormalSlip;
        n               (0 1 0);
    }

    sidesZ
    {
        type            fixedNormalSlip;
        n               (0 0 1);
    }

    atmosphere
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    movingObject
    {
        /*type            fixedValue;
        value           uniform (0 0 -1.981);*/

        type            sixDoFRigidBodyVelocity;
        value           uniform (0 0 -1.981);
        centreOfMass    (0 0 0.1127);
        velocity        (0 0 -1.981);
        //g               (0 0 -9.81);

        // Cuboid dimensions
        Lx              0.0762;
        Ly              0.0762;
        Lz              0.0254;

        // Density of the solid
        rhoSolid        2331;

        // Cuboid mass
        mass            #eval{ $rhoSolid*sqr($Ly/2)*3.1416*$Lz };

        // Cuboid moment of inertia about the centre of mass
        momentOfInertia #codeStream
        {
            codeInclude
            #{
                #include "diagTensor.H"
            #};

            code
            #{
                scalar sqrR = sqr($Ly/2);
                scalar sqrLz = sqr($Lz);
                os  <<
                    $mass
                   *diagTensor(sqrLz / 12.0 + sqrR / 4.0, sqrLz / 12.0 + sqrR / 4.0, sqrR / 4.0);
            #};
        };

        report          on;
        accelerationRelaxation 0.6;
        accelerationDamping    0.9;

        solver
        {
            type Newmark;
        }

        constraints
        {
        }
    }
}


// ************************************************************************* //
